{"version":3,"file":"focus-visible-mixin.js","sourceRoot":"","sources":["focus-visible-mixin.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAIvD,6EAA6E;AAC7E,wCAAwC;AACxC,IAAI,cAAc,GAAG,KAAK,CAAC;AAE3B,qDAAqD;AACrD,iEAAiE;AACjE,MAAM,CAAC,gBAAgB,CACrB,SAAS,EACT,GAAG,EAAE;IACH,cAAc,GAAG,IAAI,CAAC;AACxB,CAAC,EACD,EAAE,OAAO,EAAE,IAAI,EAAE,CAClB,CAAC;AAEF,MAAM,CAAC,gBAAgB,CACrB,WAAW,EACX,GAAG,EAAE;IACH,cAAc,GAAG,KAAK,CAAC;AACzB,CAAC,EACD,EAAE,OAAO,EAAE,IAAI,EAAE,CAClB,CAAC;AAMF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAO,EACqD,EAAE;IAC9D,MAAM,YAAa,SAAQ,IAAI;QAA/B;;YACE;;eAEG;YACyC,cAAS,GAAG,KAAK,CAAC;QA6ChE,CAAC;QA3CC,oBAAoB;YAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;YAE7B,qFAAqF;YACrF,oFAAoF;YACpF,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;gBAChC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACzB;QACH,CAAC;QAES,YAAY,CAAC,KAAqB;YAC1C,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE1B,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,KAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAElF,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;gBACpD,MAAM,CAAC,qBAAqB,CAAC,GAAG,EAAE;oBAChC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QAES,UAAU;YAClB,cAAc,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QAES,UAAU,CAAC,MAAkB;YACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QAES,WAAW,CAAC,MAAkB;YACtC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QAES,WAAW,CAAC,OAAgB;YACpC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAEzC,qDAAqD;YACrD,kDAAkD;YAClD,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,IAAI,cAAc,CAAC,CAAC;QAChE,CAAC;KACF;IA7C6C;QAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mDAAmB;IA+ChE,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import { property, PropertyValues } from 'lit-element';\nimport { Constructor } from '@vaadin/mixin-utils';\nimport { FocusVisibleClass } from './focus-visible-class';\n\n// We consider the keyboard to be active if the window has received a keydown\n// event since the last mousedown event.\nlet keyboardActive = false;\n\n// Listen for top-level keydown and mousedown events.\n// Use capture phase so we detect events even if they're handled.\nwindow.addEventListener(\n  'keydown',\n  () => {\n    keyboardActive = true;\n  },\n  { capture: true }\n);\n\nwindow.addEventListener(\n  'mousedown',\n  () => {\n    keyboardActive = false;\n  },\n  { capture: true }\n);\n\nexport interface FocusVisibleInterface {\n  autofocus: boolean;\n}\n\nexport const FocusVisibleMixin = <T extends Constructor<FocusVisibleClass>>(\n  base: T\n): T & Constructor<FocusVisibleClass & FocusVisibleInterface> => {\n  class FocusVisible extends base {\n    /**\n     * Specify that this control should have input focus when the page loads.\n     */\n    @property({ type: Boolean, reflect: true }) autofocus = false;\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // in non-Chrome browsers, blur does not fire on the element when it is disconnected.\n      // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n      if (this.hasAttribute('focused')) {\n        this._setFocused(false);\n      }\n    }\n\n    protected firstUpdated(props: PropertyValues) {\n      super.firstUpdated(props);\n\n      this.addEventListener('focusin', (event: FocusEvent) => this._onFocusin(event));\n      this.addEventListener('focusout', (event: FocusEvent) => this._onFocusout(event));\n\n      if (this.autofocus && !this.hasAttribute('disabled')) {\n        window.requestAnimationFrame(() => {\n          this._autoFocus();\n        });\n      }\n    }\n\n    protected _autoFocus() {\n      keyboardActive = true;\n      this._setFocused(true);\n    }\n\n    protected _onFocusin(_event: FocusEvent) {\n      this._setFocused(true);\n    }\n\n    protected _onFocusout(_event: FocusEvent) {\n      this._setFocused(false);\n    }\n\n    protected _setFocused(focused: boolean) {\n      this.toggleAttribute('focused', focused);\n\n      // focus-visible (focus-ring) attribute should be set\n      // when the element was focused from the keyboard.\n      this.toggleAttribute('focus-ring', focused && keyboardActive);\n    }\n  }\n\n  return FocusVisible;\n};\n"]}