import { __decorate } from "tslib";
import { property } from 'lit-element';
// We consider the keyboard to be active if the window has received a keydown
// event since the last mousedown event.
let keyboardActive = false;
// Listen for top-level keydown and mousedown events.
// Use capture phase so we detect events even if they're handled.
window.addEventListener('keydown', () => {
    keyboardActive = true;
}, { capture: true });
window.addEventListener('mousedown', () => {
    keyboardActive = false;
}, { capture: true });
export const FocusVisibleMixin = (base) => {
    class FocusVisible extends base {
        constructor() {
            super(...arguments);
            /**
             * Specify that this control should have input focus when the page loads.
             */
            this.autofocus = false;
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            // in non-Chrome browsers, blur does not fire on the element when it is disconnected.
            // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.
            if (this.hasAttribute('focused')) {
                this._setFocused(false);
            }
        }
        firstUpdated(props) {
            super.firstUpdated(props);
            this.addEventListener('focusin', (event) => this._onFocusin(event));
            this.addEventListener('focusout', (event) => this._onFocusout(event));
            if (this.autofocus && !this.hasAttribute('disabled')) {
                window.requestAnimationFrame(() => {
                    this._autoFocus();
                });
            }
        }
        _autoFocus() {
            keyboardActive = true;
            this._setFocused(true);
        }
        _onFocusin(_event) {
            this._setFocused(true);
        }
        _onFocusout(_event) {
            this._setFocused(false);
        }
        _setFocused(focused) {
            this.toggleAttribute('focused', focused);
            // focus-visible (focus-ring) attribute should be set
            // when the element was focused from the keyboard.
            this.toggleAttribute('focus-ring', focused && keyboardActive);
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], FocusVisible.prototype, "autofocus", void 0);
    return FocusVisible;
};
//# sourceMappingURL=focus-visible-mixin.js.map