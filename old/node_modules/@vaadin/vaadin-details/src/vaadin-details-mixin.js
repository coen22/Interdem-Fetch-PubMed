import { __decorate } from "tslib";
import { html, property } from 'lit-element';
import { ControlStateMixin } from '@vaadin/control-state-mixin/control-state-mixin.js';
import { DisabledStateMixin } from '@vaadin/disabled-state-mixin/disabled-state-mixin.js';
import { FocusVisibleMixin } from '@vaadin/focus-visible-mixin/focus-visible-mixin.js';
export const DetailsMixin = (base) => {
    class Details extends ControlStateMixin(FocusVisibleMixin(DisabledStateMixin(base))) {
        constructor() {
            super(...arguments);
            /**
             * When true, the panel content is expanded and visible
             */
            this.opened = false;
        }
        render() {
            return html `
        <div
          role="button"
          part="summary"
          @click="${this._onToggleClick}"
          @keydown="${this._onToggleKeyDown}"
          aria-expanded="${this.opened ? 'true' : 'false'}"
        >
          <span part="toggle"></span>
          <span part="summary-content"><slot name="summary"></slot></span>
        </div>
        <div part="content" aria-hidden="${this.opened ? 'false' : 'true'}" @keydown="${this._onContentKeyDown}">
          <slot></slot>
        </div>
      `;
        }
        updated(props) {
            super.updated(props);
            if (props.has('opened')) {
                this.dispatchEvent(new CustomEvent('opened-changed', {
                    detail: { value: this.opened }
                }));
            }
        }
        _onContentKeyDown(e) {
            if (e.shiftKey && e.keyCode === 9) {
                e.stopPropagation();
            }
        }
        _onToggleClick() {
            if (this.disabled) {
                return;
            }
            this._toggleOpened();
        }
        _onToggleKeyDown(e) {
            if ([13, 32].indexOf(e.keyCode) > -1) {
                e.preventDefault();
                this._toggleOpened();
            }
        }
        _toggleOpened() {
            this.opened = !this.opened;
        }
        get focusElement() {
            return this.renderRoot.querySelector('[part="summary"]');
        }
    }
    /**
     * Used for mixin detection because `instanceof` does not work with mixins.
     */
    Details.hasDetailsMixin = true;
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Details.prototype, "opened", void 0);
    return Details;
};
//# sourceMappingURL=vaadin-details-mixin.js.map