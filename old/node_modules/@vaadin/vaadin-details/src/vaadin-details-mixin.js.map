{"version":3,"file":"vaadin-details-mixin.js","sourceRoot":"","sources":["vaadin-details-mixin.ts"],"names":[],"mappings":";AAAA,OAAO,EAAc,IAAI,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAEzE,OAAO,EAAE,iBAAiB,EAAyB,MAAM,oDAAoD,CAAC;AAC9G,OAAO,EAAE,kBAAkB,EAA0B,MAAM,sDAAsD,CAAC;AAClH,OAAO,EAAE,iBAAiB,EAAyB,MAAM,oDAAoD,CAAC;AAa9G,MAAM,CAAC,MAAM,YAAY,GAAG,CAAoC,IAAO,EAA4B,EAAE;IACnG,MAAM,OAAQ,SAAQ,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAApF;;YAME;;eAEG;YACyC,WAAM,GAAG,KAAK,CAAC;QA2D7D,CAAC;QAzDW,MAAM;YACd,OAAO,IAAI,CAAA;;;;oBAIG,IAAI,CAAC,cAAc;sBACjB,IAAI,CAAC,gBAAgB;2BAChB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;;;;;2CAKd,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,eAAe,IAAI,CAAC,iBAAiB;;;OAGvG,CAAC;QACJ,CAAC;QAES,OAAO,CAAC,KAAqB;YACrC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAErB,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACvB,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,gBAAgB,EAAE;oBAChC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;iBAC/B,CAAC,CACH,CAAC;aACH;QACH,CAAC;QAEO,iBAAiB,CAAC,CAAgB;YACxC,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,OAAO,KAAK,CAAC,EAAE;gBACjC,CAAC,CAAC,eAAe,EAAE,CAAC;aACrB;QACH,CAAC;QAEO,cAAc;YACpB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAEO,gBAAgB,CAAC,CAAgB;YACvC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;gBACpC,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;QACH,CAAC;QAEO,aAAa;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7B,CAAC;QAED,IAAc,YAAY;YACxB,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC3D,CAAC;;IAlED;;OAEG;IACI,uBAAe,GAAG,IAAI,CAAC;IAKc;QAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;2CAAgB;IA6D7D,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { LitElement, html, property, PropertyValues } from 'lit-element';\nimport { Constructor } from '@vaadin/mixin-utils';\nimport { ControlStateMixin, ControlStateInterface } from '@vaadin/control-state-mixin/control-state-mixin.js';\nimport { DisabledStateMixin, DisabledStateInterface } from '@vaadin/disabled-state-mixin/disabled-state-mixin.js';\nimport { FocusVisibleMixin, FocusVisibleInterface } from '@vaadin/focus-visible-mixin/focus-visible-mixin.js';\nimport { DetailsMixinClass } from './vaadin-details-mixin-class';\n\nexport interface DetailsInterface {\n  opened: boolean;\n}\n\nexport type Details = DetailsInterface &\n  ControlStateInterface &\n  DisabledStateInterface &\n  FocusVisibleInterface &\n  DetailsMixinClass;\n\nexport const DetailsMixin = <T extends Constructor<LitElement>>(base: T): T & Constructor<Details> => {\n  class Details extends ControlStateMixin(FocusVisibleMixin(DisabledStateMixin(base))) {\n    /**\n     * Used for mixin detection because `instanceof` does not work with mixins.\n     */\n    static hasDetailsMixin = true;\n\n    /**\n     * When true, the panel content is expanded and visible\n     */\n    @property({ type: Boolean, reflect: true }) opened = false;\n\n    protected render() {\n      return html`\n        <div\n          role=\"button\"\n          part=\"summary\"\n          @click=\"${this._onToggleClick}\"\n          @keydown=\"${this._onToggleKeyDown}\"\n          aria-expanded=\"${this.opened ? 'true' : 'false'}\"\n        >\n          <span part=\"toggle\"></span>\n          <span part=\"summary-content\"><slot name=\"summary\"></slot></span>\n        </div>\n        <div part=\"content\" aria-hidden=\"${this.opened ? 'false' : 'true'}\" @keydown=\"${this._onContentKeyDown}\">\n          <slot></slot>\n        </div>\n      `;\n    }\n\n    protected updated(props: PropertyValues) {\n      super.updated(props);\n\n      if (props.has('opened')) {\n        this.dispatchEvent(\n          new CustomEvent('opened-changed', {\n            detail: { value: this.opened }\n          })\n        );\n      }\n    }\n\n    private _onContentKeyDown(e: KeyboardEvent) {\n      if (e.shiftKey && e.keyCode === 9) {\n        e.stopPropagation();\n      }\n    }\n\n    private _onToggleClick() {\n      if (this.disabled) {\n        return;\n      }\n      this._toggleOpened();\n    }\n\n    private _onToggleKeyDown(e: KeyboardEvent) {\n      if ([13, 32].indexOf(e.keyCode) > -1) {\n        e.preventDefault();\n        this._toggleOpened();\n      }\n    }\n\n    private _toggleOpened() {\n      this.opened = !this.opened;\n    }\n\n    protected get focusElement() {\n      return this.renderRoot.querySelector('[part=\"summary\"]');\n    }\n  }\n\n  return Details;\n};\n"]}